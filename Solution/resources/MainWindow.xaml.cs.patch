
EditUIMode editUiState;

// ... other code ...

#region Properties

// ... other code ...

/// <summary>
/// This property switches UI between "Normal" or "Play" state and "Edit" states
/// </summary>
EditUIMode EditUIState
{
    get { return editUiState; }
    set
    {
        switch (value)
        {
            case EditUIMode.EditingColors:
                PlayUIState = PlayUIMode.Paused;
                SetColorsEditMode(true);
                break;
            case EditUIMode.EditingAnt:
                PlayUIState = PlayUIMode.Paused;
                SetAntEditMode(true);
                break;
            case EditUIMode.EditingRule:
                PlayUIState = PlayUIMode.Paused;
                SetRuleEditMode(true);
                break;
            case EditUIMode.NotEditing:
            default:
                SetRuleEditMode(false);
                SetAntEditMode(false);
                SetColorsEditMode(false);

                if (editUiState != EditUIMode.NotEditing)
                {
                    buffer.FlushBuffer();
                }
                break;
        }
        editUiState = value;
    }
}

/// <summary>
/// Switch UI into "rule edit" mode
/// </summary>
/// <param name="value">is on</param>
void SetRuleEditMode(bool value)
{
    // Disable everything else
    SetButtonsNonEditMode(!value);

    if (value)
    {
        pnlRuleText.Visibility = Visibility.Collapsed;
        btnEditRuleStart.Visibility = Visibility.Collapsed;
        txtEditRule.Visibility = Visibility.Visible;
        btnEditRuleApply.Visibility = Visibility.Visible;
        btnEditRuleCancel.Visibility = Visibility.Visible;
    }
    else
    {
        pnlRuleText.Visibility = Visibility.Visible;
        btnEditRuleStart.Visibility = Visibility.Visible;
        txtEditRule.Visibility = Visibility.Collapsed;
        btnEditRuleApply.Visibility = Visibility.Collapsed;
        btnEditRuleCancel.Visibility = Visibility.Collapsed;
    }
}

/// <summary>
/// Enable or disable buttons not related to editing
/// </summary>
/// <param name="value">Enable buttons</param>
void SetButtonsNonEditMode(bool value)
{
    // Play - Stop - Pause
    btnPlay.IsEnabled = value;
    btnStop.IsEnabled = value;
    btnPause.IsEnabled = value;

    // Previous and next buttons
    btnStepBackward.IsEnabled = value;
    btnStepForward.IsEnabled = value;

    // Edit ants and colors
    btnEditAnt.IsEnabled = value;
    btnEditCellColor.IsEnabled = value;
    btnEditRuleStart.IsEnabled = value;

    // Save and load
    btnSave.IsEnabled = value;
    btnLoad.IsEnabled = value;
}

/// <summary>
/// Switch UI into Ant edit mode
/// </summary>
/// <param name="value">is on</param>
void SetAntEditMode(bool value)
{
    SetButtonsAntOrColorsEditMode(value);
    lblEditingAnts.Visibility = value ? Visibility.Visible : Visibility.Collapsed;
}

/// <summary>
/// Switch UI into Cell Colors edit mode
/// </summary>
/// <param name="value">is on</param>
void SetColorsEditMode(bool value)
{
    SetButtonsAntOrColorsEditMode(value);
    lblEditingColors.Visibility = value ? Visibility.Visible : Visibility.Collapsed;
}

/// <summary>
/// Switch UI into Ant or cell colors edit mode
/// </summary>
/// <param name="value">is on</param>
void SetButtonsAntOrColorsEditMode(bool value)
{
    SetButtonsNonEditMode(!value);

    if (value)
    {
        btnEditAnt.Visibility = Visibility.Collapsed;
        btnEditCellColor.Visibility = Visibility.Collapsed;
        btnBackToGame.Visibility = Visibility.Visible;
    }
    else
    {
        btnEditAnt.Visibility = Visibility.Visible;
        btnEditCellColor.Visibility = Visibility.Visible;
        btnBackToGame.Visibility = Visibility.Collapsed;
    }
}

/// <summary>
/// Set current ants rule string updating UI in the process
/// </summary>
public string Rule
{
    get
    {
        return rule;
    }
    set
    {
        if (buffer.Current == null)
            throw new InvalidOperationException("Cannot set ants rule when current game state is null");

        if (!IsRuleValid(value))
            throw new InvalidOperationException("The rule can only consist from L and R characters and be from 2 to 14 in length. Example: LLRR");

        foreach (Ant a in buffer.Current.Ants)
        {
            ((GeneralizedAnt) a).Rule = value;
        }
        buffer.FlushBuffer();

        SetRuleText(value);
        rule = value;
    }
}

private bool IsRuleValid(string proposedRule)
{
    return Regex.IsMatch(proposedRule, "^[L|R]{2,14}$");
}

private void SetRuleText(string rule)
{
    List<TextBlock> tbs = CreateColoredRuleControls(rule);
    pnlRuleText.Children.Clear();
    foreach (TextBlock tb in tbs)
    {
        pnlRuleText.Children.Add(tb);
    }
}

#endregion

#region UI

// ... other code ...

private List<TextBlock> CreateColoredRuleControls(string rule)
{
    BrushConverter bc = new BrushConverter();
    return rule
        // Calculate colors for rule letters.
        .Select((c, index) => new { Char = c, Color = ColorBytes.ColorSequence[index] })
        .Select(cc => new TextBlock()
        {
            Text = cc.Char.ToString(),
            // Invert black text on very dark backgound.
            Foreground = (cc.Color[0] + cc.Color[1] + cc.Color[2] < 128 * 2.5) ? Brushes.White : Brushes.Black,
            // cc.Color is BGR
            Background = new SolidColorBrush(Color.FromRgb(cc.Color[2], cc.Color[1], cc.Color[0])),
            FontWeight = FontWeights.Bold
        }).ToList();
}

#endregion

#region Event Handlers

// ... other code ...

/// <summary>
/// If all the ants have the same rule, return the rule string, else return null
/// </summary>
/// <param name="ants">GeneralizedAnt list</param>
/// <returns></returns>
private string? CalculateCommonRule(IList<IAnt> ants)
{
    string? commonRule = null;
    foreach(IAnt a in ants)
    {
        string rule = ((GeneralizedAnt)a).Rule;
        if (commonRule == null)
            commonRule = rule;
        else if (rule != commonRule)
            return null;
    }
    return commonRule;
}

private void imgGame_MouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
{
    if (buffer.Current == null)
        throw new InvalidOperationException("Cannot edit game field when current game state is null");

    var img = (Image)sender;

    var ratio = (double)img.RenderSize.Width / buffer.Current.Size;
    Point clickPoint = e.GetPosition(img);
    var gameI = (int)(clickPoint.Y / ratio);
    var gameJ = (int)(clickPoint.X / ratio);

    if (EditUIState == EditUIMode.EditingAnt)
    {
        // TODO implemet Ant editing here
        // Loop through adding, rotating and deleting the ant when the cell is clicked
        //    if no ant at (gameI, gameJ), then add with AntDirection.Up
        //    if an and is present, then rotate the ant through 4 directions each click
        //    if the last of the 4 directions is reached, then remove the ant in this cell
        // Use this.buffer.Current, gameI, gameJ, Ant.RotateCW, this.Rule, GeneralizedAnt constructor

    }

    if (EditUIState == EditUIMode.EditingColors)
    {
        // TODO add cell color editing code here
        // Use this.buffer.Current, gameI, gameJ, this.MaxColor

    }
    UpdateGameView(buffer.Current);
}


#endregion